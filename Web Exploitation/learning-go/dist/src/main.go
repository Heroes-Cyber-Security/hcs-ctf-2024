package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/gorilla/mux"
	_ "github.com/lib/pq"
)

type LoginRequest struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func main() {
	//connect to database
	db, err := sql.Open("postgres", os.Getenv("DATABASE_URL"))
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	if err != nil {
		log.Fatal(err)
	}

	//create router
	router := mux.NewRouter()
	router.Handle("/", http.FileServer(http.Dir(".")))
	router.HandleFunc("/login", login(db)).Methods("POST")

	//start server
	log.Fatal(http.ListenAndServe(":8000", router))
}

// create user
func login(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var u LoginRequest
		err := json.NewDecoder(r.Body).Decode(&u)
		if err != nil {
			w.WriteHeader(500)
			w.Write([]byte(err.Error()))
			return
		}

		findQuery := fmt.Sprintf("SELECT id FROM users WHERE id = '%s' AND password = '%s'", u.ID, u.Password)
		err = db.QueryRow(findQuery).Scan(&u.ID)
		if err != nil {
			w.WriteHeader(500)
			w.Write([]byte(err.Error()))
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		w.Write([]byte(`{"message":"Login Success!"}`))
	}
}
